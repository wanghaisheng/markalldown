from flask import Flask, request, jsonify, render_template
import os
import urllib.request
from io import BytesIO
from pdfminer.high_level import extract_text
from docx import Document
from pptx import Presentation
import zipfile
import io
import github
from github import Github
import base64
from datetime import datetime
import json

app = Flask(__name__)

# GitHub configuration
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
REPO_NAME = os.environ.get('GITHUB_REPOSITORY', 'wanghaisheng/markalldown')
g = Github(GITHUB_TOKEN)

class GitHubManager:
    def __init__(self, token, repo_name):
        self.github = Github(token)
        self.repo = self.github.get_repo(repo_name)

    def create_branch(self, branch_name, base_branch='main'):
        try:
            # Get the base branch
            base = self.repo.get_branch(base_branch)
            
            # Create new branch
            ref = f"refs/heads/{branch_name}"
            try:
                self.repo.create_git_ref(ref=ref, sha=base.commit.sha)
                return True
            except github.GithubException as e:
                if e.status != 422:  # 422 means branch already exists
                    raise
                return True
        except Exception as e:
            print(f"Error creating branch: {str(e)}")
            return False

    def commit_file(self, file_path, content, branch_name, commit_message):
        try:
            # Check if file exists
            try:
                file = self.repo.get_contents(file_path, ref=branch_name)
                # Update existing file
                self.repo.update_file(
                    file_path,
                    commit_message,
                    content,
                    file.sha,
                    branch=branch_name
                )
            except github.GithubException as e:
                # Create new file if it doesn't exist
                self.repo.create_file(
                    file_path,
                    commit_message,
                    content,
                    branch=branch_name
                )
            return True
        except Exception as e:
            print(f"Error committing file: {str(e)}")
            return False

    def create_pull_request(self, branch_name, title, body):
        try:
            pr = self.repo.create_pull(
                title=title,
                body=body,
                head=branch_name,
                base=self.repo.default_branch
            )
            return pr.number
        except Exception as e:
            print(f"Error creating PR: {str(e)}")
            return None

def save_results_to_github(process_id, results_data):
    try:
        github_manager = GitHubManager(GITHUB_TOKEN, REPO_NAME)
        
        # Create branch name from process ID
        branch_name = f"process-{process_id}"
        
        # Create new branch
        if not github_manager.create_branch(branch_name):
            raise Exception("Failed to create branch")

        # Prepare files to commit
        files_to_commit = {
            f"results/{process_id}/result.txt": {
                "content": results_data["text_content"],
                "message": f"Add text extraction results for process {process_id}"
            },
            f"results/{process_id}/metadata.json": {
                "content": json.dumps({
                    "process_id": process_id,
                    "timestamp": datetime.utcnow().isoformat(),
                    "input_variables": results_data["input_variables"],
                    "file_info": results_data["file_info"]
                }, indent=2),
                "message": f"Add metadata for process {process_id}"
            }
        }

        # Commit each file
        for file_path, file_data in files_to_commit.items():
            if not github_manager.commit_file(
                file_path,
                file_data["content"],
                branch_name,
                file_data["message"]
            ):
                raise Exception(f"Failed to commit {file_path}")

        # Create pull request
        pr_title = f"Processing Results: {process_id}"
        pr_body = f"Results from file processing job {process_id}\n\nAutomatically generated by processing service."
        pr_number = github_manager.create_pull_request(branch_name, pr_title, pr_body)

        return {
            "branch_name": branch_name,
            "pr_number": pr_number,
            "files": list(files_to_commit.keys())
        }

    except Exception as e:
        print(f"Error in save_results_to_github: {str(e)}")
        raise

def extract_text_from_file(file_path, file_extension):
    text = ""
    try:
        if file_extension == '.pdf':
            text = extract_text(file_path)
        elif file_extension == '.docx':
            doc = Document(file_path)
            text = "\n".join([para.text for para in doc.paragraphs])
        elif file_extension == '.pptx':
            presentation = Presentation(file_path)
            text = "\n".join([shape.text for slide in presentation.slides 
                            for shape in slide.shapes if hasattr(shape, "text")])
        elif file_extension == '.txt':
            if isinstance(file_path, BytesIO):
                text = file_path.getvalue().decode('utf-8')
            else:
                with open(file_path, 'r') as file:
                    text = file.read()
        elif file_extension in ['.jpg', '.jpeg', '.png']:
            from PIL import Image
            import pytesseract
            img = Image.open(file_path)
            text = pytesseract.image_to_string(img)
        return text
    except Exception as e:
        return f"Error processing file: {str(e)}"

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    
    if not data or 'process_id' not in data:
        return jsonify({'error': 'Missing process_id'}), 400
    
    process_id = data['process_id']
    file_url = data.get('file_url')
    input_vars = data.get('input_variables', {})
    
    try:
        # Download and process file
        response = urllib.request.urlopen(file_url)
        file_data = response.read()
        file_name = file_url.split("/")[-1]
        file_extension = os.path.splitext(file_name)[1].lower()
        
        # Process the file
        temp_file = BytesIO(file_data)
        text_content = extract_text_from_file(temp_file, file_extension)
        
        # Prepare results data
        results_data = {
            "text_content": text_content,
            "input_variables": input_vars,
            "file_info": {
                "original_filename": file_name,
                "file_extension": file_extension,
                "file_size": len(file_data),
                "processed_at": datetime.utcnow().isoformat()
            }
        }
        
        # Save to GitHub and create PR
        github_result = save_results_to_github(process_id, results_data)
        
        return jsonify({
            'status': 'success',
            'process_id': process_id,
            'github_info': github_result
        })
            
    except Exception as e:
        return jsonify({
            'error': str(e),
            'process_id': process_id
        }), 500

if __name__ == '__main__':
    app.run(debug=True)
